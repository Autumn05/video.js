<!DOCTYPE html>
<html lang="en-GB">
<head>
  <meta charset="utf-8" />
  <title>Video.js Sandbox</title>

  <!-- Add ES5 shim and sham for IE8 -->
  <script src="../build/temp/ie8/videojs-ie8.js"></script>

  <!-- Load the source files -->
  <link href="../build/temp/video-js.css" rel="stylesheet" type="text/css">
  <script src="../dist/video.js"></script>
  <script src="../node_modules/videojs-flash/dist/videojs-flash.js"></script>

  <!-- Set the location of the flash SWF -->
  <script>
    videojs.options.flash.swf = '../build/temp/video-js.swf';
  </script>
</head>
<body>

  <video id="vid1" class="video-js vjs-default-skin" lang="en" controls preload="auto" width="640" height="360" poster="//d2zihajmogu5jn.cloudfront.net/elephantsdream/poster.png">
    <source src="//d2zihajmogu5jn.cloudfront.net/elephantsdream/ed_hd.mp4" type="video/mp4">
    <source src="//d2zihajmogu5jn.cloudfront.net/elephantsdream/ed_hd.ogg" type="video/ogg">
  </video>

  <input id="stateToggle" type="checkbox">Terminate</input>

  <script>
    var stateToggle = document.getElementById('stateToggle');

    // Play Middleware
    var m1 = function(player) {
      return {
        // Mediating play to the tech
        callPlay: function() {
          if (stateToggle.checked) {
            console.log('1 Play is set to terminate');
            return videojs.TERMINATOR;
          }
        },
        // Mediating the results back to the player
        play: function(value, cancelled) {
          console.log('1 got Play. Did it succeed:', !cancelled, 'value', value);

          return value;
        },
        callPause: function() {
          if (stateToggle.checked) {
            return videojs.TERMINATOR;
          }
        },
        pause: function(value, cancelled) {
          console.log('1 Pause succeed:', !cancelled);

          return value;
        },
        paused: function(paused) {
          console.log('1 got paused', paused);

          return paused;
        },
        setCurrentTime: function(time) {
          console.log('1 was going to set time to', time);
          return time * 2;
        },
        setSource: function(srcObj, next) {
          next(null, srcObj);
        }
      };
    };

    var m2 = function(player) {
      return {
        callPlay: function() {
          console.log('2 called play');
        },
        play: function(value, cancelled) {
          console.log('2 got play');
        },
        callPause: function() {
          console.log('2 called pause');
        },
        pause: function(value, cancelled) {
          console.log('2 got pause');
        },
        setSource: function(srcObj, next) {
          next(null, srcObj);
        }
      };
    }

    videojs.use('*', m1);
    videojs.use('*', m2);

    // Initial set-up
    var vid = document.getElementById("vid1");
    var player = videojs(vid, {
      controlBar: {
        children: [
          'playToggle',
          'volumePanel',
          'currentTimeDisplay',
          'timeDivider',
          'durationDisplay',
          'progressControl',
          'liveDisplay',
          'remainingTimeDisplay',
          'customControlSpacer',
          'playbackRateMenuButton',
          'chaptersButton',
          'descriptionsButton',
          'subtitlesButton',
          'captionsButton',
          'subsCapsButton',
          'audioTrackButton',
          'fullscreenToggle'
        ]
      }
    });

    console.log('Calling play...');
    player.setTimeout(() => {
      player.play()
        .then(() => {
          console.log('we are playing, the promise resolved');
        },
        (err) => {
          console.log('we failed to play, the promise was rejected');
        });
    }, 500);
  </script>

</body>
</html>
